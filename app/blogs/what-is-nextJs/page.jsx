import BlogDetail from "@/components/BlogDetail";
import React from "react";
import whatIsNextJs from "@/public/assets/whatIsNextJs.jpg";
import secondImageWhatIsNext from "@/public/assets/Blog/secondImageWhatIsNext.png";
import thirdImageWhatIsNextJS from "@/public/assets/Blog/thirdImageWhatIsNextJS.jpg";

function page() {
  return (
    <>
      <BlogDetail
        firstImageAlt={"Next.js چیست و چرا از آن استفاده می کنیم؟"}
        firstImageSrc={whatIsNextJs}
        secondImage={secondImageWhatIsNext}
        thirdImage={thirdImageWhatIsNextJS}
        title={"Next.js چیست و چرا از آن استفاده می کنیم؟"}
        firstBody={
          "اگر در زمینه توسعه وب کار می کنید، به احتمال زیاد نام Next.js را شنیده اید یا در مورد آن کنجکاو هستید. Next.js چیزی است که اغلب به عنوان «فریمورک متا» شناخته می شود، زیرا فریم ورکی است که بر اساس یک یا چند فریمورک دیگر ساخته شده است. Next.js بر اساس React ساخته شده است. به‌طور ساده، Next.js یک فریم ورک React برای توسعه برنامه‌های جاوا اسکریپت تک صفحه‌ای است. مزایای این فریم ورک، هم برای برنامه های کاربردی client و هم برای تیم توسعه بسیار زیاد است.سایت ها و برنامه هایی که سریع نیستند انتظارات ما را برآورده نمی کنند و آن ها را نمی پسندیم. یکی از مهم ترین مزایای Next.js  سرعت و عملکرد فوق العاده آن است.    Next.js به طور گسترده توسط بزرگترین و محبوب ترین شرکت ها در سراسر جهان مانند Netflix، Uber ،Starbucks یا Twitch استفاده می شود. همچنین به‌عنوان یکی از سریع‌ترین فریمورک‌های React در نظر گرفته می‌شود که برای کار با سایت‌های استاتیک مناسب است که اخیرا جذاب ترین موضوع در دنیای توسعه وب است. بخش بزرگی از دلیلی که توسعه دهندگان و شرکت ها Next.js را برای توسعه برنامه های کاربردی وب خود انتخاب می کنند این است که این یک فریم ورک fullstack است. بیایید نگاهی کوتاه به نحوه تکامل Next.js و به ویژه نحوه تکامل متدهای render در Next.js بیندازیم."
        }
        secondTitle={"تکامل Next.js"}
        secondBody={
          "امروزه، Next.js اغلب با متدولوژی Jamstack برای توسعه برنامه های کاربردی وب مرتبط است. با این حال، زمانی که در اوایل سال 2016 راه اندازی شد، فقط برای برنامه های سمت سرور استفاده می شد. در آن زمان، چیزی که Next.js را منحصربه‌فرد می‌کرد این بود که هم frontend و هم backend برنامه شما را مدیریت می‌کرد و هر دو با استفاده از جاوا اسکریپت و React ساخته می شدند. این به توسعه دهندگان اجازه می دهد تا با استفاده از تنها یک زبان و مجموعه ابزار، برنامه های fullstack بسازند و در عین حال تجربه کاربری بهبود یافته ای را ارائه دهند که معمولا منجر به رندر اولیه سریعتر صفحه می شود. Next.js هم چنین به دلیل ساده سازی ساخت برنامه های فول استک با استفاده از React محبوبیت پیدا کرد."
        }
        thirdTitle={""}
        thirdBody={""}
        forthTitle={
          "ویژگی های مهم Next.js"
        }
        fifthTitle={"۱. Server-side Rendering (صفحه سازی در سمت سرور)"}
        forthBody={
          "Server-side Rendering به معنی رندر کردن صفحات (ساخت و نمایش آن ها) در سمت سرور است. اگر با react کار کرده باشید می دانید که ما در react داده ها را از سرور گرفته و در سمت کلاینت (در مرورگر کاربر) از آن داده ها برای ساخت و نمایش صفحه (render کردن آن) استفاده می کنیم. در این حالت صفحه را در سمت کلاینت ساخته و نمایش داده ایم اما server-side rendering مانند زمانی است که از PHP برای تولید صفحات HTML استفاده می کنید! یعنی صفحات شما در سمت سرور ساخته شده و سپس به صورت آماده به سمت کاربر ارسال می شوند بنابراین کاربر نیازی به انجام پردازش ندارد.  چنین برنامه هایی مشکل جدی ایجاد نمی کنند (البته بسته به اینکه چه برنامه ای را می سازید) اما یکی از معایب آن این است که کاربر در اولین بازدید خود از سایت شما باید مدت نسبتا زیادی را منتظر بماند. چرا؟ به دلیل اینکه ابتدا سرور فایل های جاوا اسکریپت را برای کاربر می فرستد، سپس مرورگر کاربر این فایل ها را اجرا می کند و تازه در این مرحله دریافت داده های صفحه از سمت پایگاه داده و سرور شرع می شود. به همین خاطر است که در بسیاری از برنامه های SPA یک علامت loading یا spinner را مشاهده می کنید که به کاربر می گوید منتظر باشد. زمانی که می گویم «مدت نسبتا زیاد» منظورم بر اساس معیار های سایبری سریع امروزی است. در بسیاری از اوقات این وقفه هیچ مشکلی ندارد اما شاید شما بخواهید صفحات سریعا برای کاربر باز شوند.   یکی دیگر از مشکلات SPA ها، مشکلات مربوط به بهینه سازی موتورهای جست و جو (سئو یا SEO) است. اگر برنامه شما خصوصی باشد (مثلا صفحه ادمین در یک وب سایت) این صفحه هیچ گاه توسط موتورهای جست و جو خوانده نخواهد شد بنابراین مسئله سئو به هیچ عنوان در آن اهمیت ندارد اما اگر هدف اصلی وب سایت شما بالا آمدن در گوگل و فروش محصول یا خدمات خاصی است، باید فکری به حال سئو بکنید. چرا؟ به دلیل اینکه موتورهای جست و جو در ابتدا فقط یک صفحه خالی را می بینند که جاوا اسکریپت دارد اما بعد از چند لحظه محتوای صفحه را دریافت می کنند. این وقفه می تواند باعث ضربه خوردن سئوی شما شود. همچنین در برخی موارد معدود نیز موتورهای جست و جو اصلا نمی توانند محتوای یک صفحه SPA را مشاهده کنند که از نظر سئو بسیار بد است.  اینجاست که server-side rendering به ما کمک می کند. اگر صفحات ما در سمت سرور ساخته شده باشند و سپس ما آن صفحه آماده را به سمت کاربر ارسال کنیم دیگر از نظر سئو هیچ مشکلی نداریم. همچنین دیگر آن وقفه اولیه وجود ندارد و صفحات به صورت لحظه ای برای کاربر نمایش داده می شود. لازم به ذکر است که React به صورت پیش فرض دارای قابلیت هایی است که به شما اجازه می دهد server-side rendering را در خود react انجام بدهید اما پیکربندی و راه اندازی آن کمی سخت است و از نظر قابلیت نیز به پای Next نمی رسد."
        }
        sixthTitle={"۲. File-based Routing (ناوبری فایل محور)"}
        fifthBody={
          "ویژگی دوم و بسیار محبوب Next.js ناوبری فایل محور یا File-based Routing است. در کتابخانه react به صورت پیش فرض هیچ router ای وجود ندارد که مسیر حرکت کاربر و تغییر URL مرورگر را تحت نظر بلکه از پکیج هایی مانند react-router استفاده می کنیم. کار چنین پکیج هایی این است که با تغییر URL در مرورگر کاربر، جلوی رفتار پیش فرض مرورگر (ارسال درخواست HTTP) گرفته شود و سپس نمایش محتوای متفاوت در همان صفحه است بنابراین به نوعی کاربر را گول می زنیم تا تصور کند برنامه ما صفحات مختلفی را دارد.  یکی از معایب این پکیج ها این است که در آن ها کدنویسی اضافه داریم و باید آن ها را با React ترکیب کنیم. همچنین هیچ ارتباطی بین کامپوننت های React ما و route های برنامه وجود ندارد، به غیر از چیزی که به صورت صریح و با کد مشخص کرده باشیم. Next.js این مسئله را با معرفی سیستم ناوبری یا routing خاص خودش حل می کند! در Next.js برای تعریف یک مسیر (route) جدید از فایل ها و پوشه ها استفاده می کنیم! در واقع در پروژه های Next.js یک پوشه به نام pages را داریم که عینا باید با همین نام باشد. حالا درون این پوشه، پوشه ها و فایل های دیگری را خواهید داشت و ساختار این پوشه ها و فایل ها دقیقا سیستم routing وب سایت شما خواهد بود!  چنین سیستمی برای ساخت route چندین مزیت مهم دارد. اولا برای تولید route ها هیچ نیازی به نوشتن کد نداریم بلکه Next.js خودش این کار را برایمان انجام می دهد. دوما به دلیل نوشتن کد کمتر، خوانایی کدهایمان بالا رفته و از شلوغ شدن پروژه جلوگیری می کنیم. سوما درک سیستم routing در این حالت بسیار ساده تر است چرا که با نگاه انداختن به پوشه pages به راحتی می توانیم مسیر های سایت خودمان را ببینیم. طبیعتا این سیستم routing تمام امکانات سیستم های مدرن ناوبری را دارد: مثلا به nested routes دسترسی دارید، به dynamic routes دسترسی دارید، به dynamic parameters دسترسی دارید و الی آخر."
        }
        seventhTitle={
          "۳. Fullstack Capabilities (توانایی فول استک)"
        }
        sixthBody={
          "ما می دانیم که react برای سمت کلاینت (مرورگر کاربر) ساخته شده است اما سمت سرور چطور؟ باید توجه داشت که Next.js به صورت جادویی کدهای سمت سرور را برای شما نمی نویسد چرا که چنین کاری اصلا ممکن نیست. کاری که Next.js برای ما انجام می دهد ساده کردن ترکیب کد react با کد سمت سرور (منطق کاری سایت ما) است. اگر از Next.js استفاده کنید، ساخت یک API در سمت سرور برای کار با برنامه React بسیار آسان خواهد بود. با این حساب فرآیند هایی که به سرور و API نیاز دارند به راحتی در دسترس شما خواهند بود. مثلا فرآیند احراز هویت کاربران، دریافت داده، ذخیره سازی داده و امثال آن همگی به راحتی انجام می شوند.  شاید بپرسید مگر با react عادی نمی توانیم این کار را انجام بدهیم؟ حرفتان صحیح است. ما می توانیم بدون Next.js یک پروژه react داشته باشیم و API را جداگانه بنویسیم. در هر دو حالت نیز باید API را خودمان بنویسیم اما در پروژه های Next.js علاوه بر مزیت های قبلی این مزیت را نیز داریم که کد سمت سرور (مثلا Node.js) و کد سمت کلاینت‌ (React) در یک پروژه و یکجا قرار دارند بنابراین مدیریت آن بسیار ساده تر خواهد بود."
        }
        eightthTitle={""}
        seventhBody={
          ""
        }
        nineThTitle={"مزایای Nextjs"}
        eighthBody={
          "یکی از مهمترین مزایای یادگیری Next.js، آگاهی شما از میزان انعطاف پذیری و توانمندی در ساخت برنامه های مختلف است.سرعت بارگذاری صفحه (در میلی ثانیه!) و تجربه کاربر از استفاده از وب سایت ها یا فروشگاه های وب در طراحی های وب امروزی نقش بسیار مهمی دارند. Nextjs به شما امکان می دهد تا برنامه های ساده و پیچیده را بسیار سریع تر و آسان تر بسازید و به لطف بسیاری از فریم ورک هایی که برای آن رشد کرده اند، می توانید وب سایت های فوق العاده سریعی برای دستیابی به تجربه کاربری و SEO بهتر ایجاد کنید.   Next.js به اندازه کافی کارآمد است که فقط جاوا اسکریپت و CSS را که برای هر صفحه مورد نیاز است بارگیری کند. این باعث می‌شود زمان بارگذاری صفحه بسیار سریع‌تر شود، زیرا مرورگر مجبور نیست جاوا اسکریپت و CSS را برای صفحه خاصی که کاربر به آن نیاز ندارد بارگیری کند. این کارایی را افزایش می دهد زیرا مرورگر کاربر کمتر دانلود می کند و کاربر از دیدن سریعتر محتوای صفحه سود می برد.  HMR بیش تر برای توسعه دهندگان اهمیت دارد تا کاربران معمولی.به توسعه‌دهندگان اجازه می‌دهد تا تغییراتی را که در طول توسعه ایجاد کرده‌اند، به‌محض ایجاد آن‌ها در برنامه ی در حال اجرا ببینند. با این حال، برخلاف روش‌های سنتی، فقط ماژول‌هایی را بارگذاری می‌کنند که واقعا تغییر کرده‌اند، وضعیتی را که برنامه در آن قرار داشته است را حفظ می‌کنند و زمان مورد نیاز برای مشاهده تغییرات در عمل را به میزان قابل توجهی کاهش می‌دهند. در نهایت، تاثیر مثبت برای مشتریان ما این است که زمان کمتری برای توسعه از ما می‌گیرد."
        }
        tenthTitle={"معایب استفاده از Next.js"}
        ninethBody={
          "توسعه و مدیریت - انعطاف پذیری ارائه شده توسط Next هزینه های خود را دارد. برای ایجاد همه تغییرات مورد نظر، به یک فرد متخصص با دانش مناسب نیاز داریم. خبر خوب این است که این شخص نباید توسعه دهنده باشد  هزینه مداوم – از آن جایی که Next.js صفحات داخلی زیادی را render نمی کند، باید قسمت frontend خود را باید ایجاد کنید، که هر از گاهی به تغییرات نیاز دارد. این به این معنی است که برای انجام کار باید به یک توسعه دهنده پول پرداخت کنید.  پلاگین کم - شما نمی توانید از پلاگین های زیادی استفاده کنید.  عدم انعطاف پذیری سیستم routing - با اینکه سیستم routing مورد علاقه ما است اما قابل تغییر نیست. اگر شما دوست نداشته باشید از این سیستم استفاده کنید، هیچ راهی برای تغییر آن وجود ندارد. محدودیت زبان سمت سرور - فریم ورک Next.js تکنولوژی سمت سرور خود را Node انتخاب کرده است و تغییر آن ممکن نیست. مثلا اگر بخواهید به جای Node از زبان PHP استفاده کنید ممکن نیست. حتی اگر بخواهید به جای Node از تکنولوژی بسیار مشابهی مانند Deno استفاده کنید باز هم ممکن نیست."
        }
        eleventhTitle={
         ""
        }
        tenthBody={""}
        date={"۱۴۰۲/۱۱/۲۶"}
        author={"عرفان رضایی"}
      />
    </>
  );
}

export default page;
